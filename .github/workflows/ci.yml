name: CI

on:
  push:
    branches: [ main, master, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]

env:
  GO_VERSION: '1.24'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.22', '1.23', '1.24']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-v2-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-v2-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Verify dependencies
      run: go mod verify
    
    - name: Run tests
      run: make test
    
    - name: Generate coverage report
      if: matrix.go-version == '1.24'
      run: make coverage
    
    - name: Upload coverage to Codecov
      if: matrix.go-version == '1.24'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: latest
        args: --timeout=5m

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-v2-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-v2-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Build binary
      run: make build
    
    - name: Test CLI functionality
      run: |
        ./build/usfmp --help
        ./build/usfmp --version || echo "Version flag not implemented yet"
    
    - name: Test with sample data
      run: |
        if [ -f "bsb_usfm/01GENBSB.SFM" ]; then
          ./build/usfmp -f json -q bsb_usfm/01GENBSB.SFM > /dev/null
          echo "✅ JSON output test passed"
          ./build/usfmp -f txt -q bsb_usfm/01GENBSB.SFM > /dev/null
          echo "✅ Text output test passed"
          ./build/usfmp -f tsv -q bsb_usfm/01GENBSB.SFM > /dev/null
          echo "✅ TSV output test passed"
        else
          echo "⚠️ Sample data not found, skipping integration tests"
        fi
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: usfmp-binary-${{ github.sha }}
        path: build/usfmp
        retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Download build artifact
      uses: actions/download-artifact@v5
      with:
        name: usfmp-binary-${{ github.sha }}
        path: build/
    
    - name: Make binary executable
      run: chmod +x build/usfmp
    
    - name: Run Grype vulnerability scanner
      uses: anchore/scan-action@v6
      id: grype-scan
      with:
        path: "."
        output-format: sarif
        output-file: grype-results.sarif
        fail-build: false
      continue-on-error: true
    
    - name: Check SARIF file exists and is valid
      id: check-sarif
      run: |
        if [ -f "grype-results.sarif" ] && [ -s "grype-results.sarif" ]; then
          # Check if it's valid JSON
          if jq empty grype-results.sarif 2>/dev/null; then
            echo "sarif-valid=true" >> $GITHUB_OUTPUT
            echo "✅ SARIF file is valid"
          else
            echo "sarif-valid=false" >> $GITHUB_OUTPUT
            echo "❌ SARIF file is not valid JSON"
          fi
        else
          echo "sarif-valid=false" >> $GITHUB_OUTPUT
          echo "❌ SARIF file does not exist or is empty"
        fi
    
    - name: Upload Grype scan results
      uses: github/codeql-action/upload-sarif@v3
      if: steps.check-sarif.outputs.sarif-valid == 'true'
      with:
        sarif_file: grype-results.sarif
      continue-on-error: true
    
    - name: Run Grype for human readable output
      uses: anchore/scan-action@v6
      with:
        path: "."
        output-format: table
        fail-build: false

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files need formatting:"
          gofmt -s -l .
          exit 1
        fi
    
    - name: Run ineffassign
      run: |
        go install github.com/gordonklaus/ineffassign@latest
        ineffassign ./...
    
    - name: Run misspell
      run: |
        go install github.com/client9/misspell/cmd/misspell@latest
        find . -name "bsb_usfm" -prune -o -type f -print | xargs misspell -error
    
    - name: SonarCloud Scan
      if: (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository) && ${{ secrets.SONAR_TOKEN != '' }}
      uses: SonarSource/sonarqube-scan-action@v5.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      continue-on-error: true

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, lint, build, security-scan, code-quality]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v6
      with:
        distribution: goreleaser
        version: '~> v2'
        args: release --clean
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}