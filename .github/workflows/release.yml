name: Release

on:
  push:
    tags:
      - 'v*'
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  GO_VERSION: '1.24'

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  # Pre-release tests
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: make test
    
    - name: Run lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: latest
        args: --timeout=5m

  # Create tag for manual releases
  create-tag:
    name: Create Tag
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'workflow_dispatch'
    outputs:
      tag: ${{ steps.create.outputs.tag }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create and push tag
      id: create
      run: |
        VERSION="${{ github.event.inputs.version }}"
        if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
          echo "Invalid version format: $VERSION"
          exit 1
        fi
        
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        if git tag -l | grep -q "^${VERSION}$"; then
          echo "Tag $VERSION already exists"
          exit 1
        fi
        
        git tag -a "${VERSION}" -m "Release ${VERSION}"
        git push origin "${VERSION}"
        echo "tag=${VERSION}" >> $GITHUB_OUTPUT

  # Main release job using GoReleaser
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && needs.create-tag.result == 'success')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
    
    - name: Download dependencies
      run: go mod download
    
    - name: Install cosign
      uses: sigstore/cosign-installer@v3
      with:
        cosign-release: 'v2.1.1'
    
    - name: Install Syft (for SBOM generation)
      uses: anchore/sbom-action/download-syft@v0
    
    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v6
      with:
        distribution: goreleaser
        version: '~> v2'
        args: release --clean --timeout 60m
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        COSIGN_EXPERIMENTAL: 1

  # Post-release security scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: release
    if: always() && needs.release.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    
    - name: Get latest release
      id: latest-release
      uses: actions/github-script@v7
      with:
        script: |
          const { data: release } = await github.rest.repos.getLatestRelease({
            owner: context.repo.owner,
            repo: context.repo.repo
          });
          
          // Find Linux AMD64 binary asset
          const asset = release.assets.find(a => 
            a.name.includes('linux') && 
            a.name.includes('x86_64') && 
            a.name.endsWith('.tar.gz')
          );
          
          if (!asset) {
            throw new Error('Could not find Linux AMD64 binary asset');
          }
          
          core.setOutput('download-url', asset.browser_download_url);
          core.setOutput('asset-name', asset.name);
          return asset.browser_download_url;
    
    - name: Download and extract release binary
      run: |
        curl -L "${{ steps.latest-release.outputs.download-url }}" -o release.tar.gz
        tar -xzf release.tar.gz
        chmod +x usfmp
    
    - name: Security scan with Grype
      uses: anchore/scan-action@v6
      with:
        path: "./usfmp"
        format: sarif
        output-file: grype-results.sarif
        fail-build: false
    
    - name: Upload scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: grype-results.sarif